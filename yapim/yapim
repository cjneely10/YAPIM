#!/usr/bin/env python

"""YAPIM cli script"""

import os
import sys
from pathlib import Path
from typing import Optional, List

from plumbum import cli

from yapim.utils.executor import Executor
# pylint: disable=fixme
# TODO: Remove this requirement
# Import is needed dynamically
from yapim.utils.extension_loader import ExtensionLoader
from yapim.utils.package_management.directory_cleaner import DirectoryCleaner
from yapim.utils.package_management.package_generator import PackageGenerator
from yapim.utils.package_management.package_loader import PackageLoader


class YAPIM(cli.Application):
    """
    Create and run Yet Another PIpeline (Manager)
    """
    VERSION = "0.1.4"

    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            sys.exit(1)
        if not self.nested_command:
            self.help()
            sys.exit(1)


@YAPIM.subcommand("clean")
class YAPIMClean(cli.Application):
    """
    Clean project working directory of specified Task contents and all affected downstream Tasks
    """
    output_directory: Path
    pipeline_directory: Path

    @cli.switch(["-o", "--output"], str, mandatory=True)
    def set_output_directory(self, output):
        """Pipeline output directory"""
        output = Path(output).resolve()
        if not output.exists() or not output.is_dir():
            print("Output directory not found")
            sys.exit(1)
        self.output_directory = output

    @cli.switch(["-p", "--pipeline"], str, mandatory=True)
    def set_pipeline_path(self, pipeline):
        """Path to directory containing pipeline.pkl file"""
        self.pipeline_directory = Path(pipeline).resolve()

    def main(self, *ids):
        DirectoryCleaner(self.output_directory).clean(self.pipeline_directory, list(ids))
        print("Complete!")


@YAPIM.subcommand("remove")
class YAPIMRemove(cli.Application):
    """
    Remove input ids from working directory, results, and input storage directory
    """
    output_directory: Path

    @cli.switch(["-o", "--output"], str, mandatory=True)
    def set_output_directory(self, output):
        """Pipeline output directory"""
        output = Path(output).resolve()
        if not output.exists() or not output.is_dir():
            print("Output directory not found")
            sys.exit(1)
        self.output_directory = output

    def main(self, *ids):
        DirectoryCleaner(self.output_directory).remove(list(ids))


@YAPIM.subcommand("create")
class YAPIMConfigCreator(cli.Application):
    """
    Create pipeline package
    """
    tasks_directory: Path
    loader: Optional[Path] = None
    dependencies_directories: Optional[List[Path]] = None
    config_path: Path
    output_path: Optional[Path] = None

    @cli.switch(["-l", "--loader"], str)
    def set_loader(self, loader_name):
        """Path to custom loader class extending InputLoader"""
        if not os.path.exists(loader_name) or not os.path.isfile(loader_name):
            print("Unable to find loader")
            sys.exit(1)
        self.loader = loader_name

    @cli.switch(["-t", "--tasks"], str, mandatory=True)
    def set_tasks_dir(self, tasks_dir):
        """Path to directory of pipeline Task/AggregateTasks"""
        if not os.path.exists(tasks_dir) or not os.path.isdir(tasks_dir):
            print("Unable to find tasks directory")
            sys.exit(1)
        self.tasks_directory = Path(tasks_dir).resolve()

    @cli.switch(["-d", "--dependencies"], str, list=True)
    def set_dependencies_directory(self, dependencies):
        """Path to directory of Task/AggregateTask dependencies"""
        # pylint: disable=consider-using-enumerate
        for i in range(len(dependencies)):
            if not os.path.exists(dependencies[i]) or not os.path.isdir(dependencies[i]):
                print("Unable to find dependencies directory")
                sys.exit(1)
            dependencies[i] = Path(dependencies[i]).resolve()
        self.dependencies_directories = dependencies

    @cli.switch(["-o", "--output"], str)
    def set_output_path(self, output_path):
        """Output path and name, default current-directory/<tasks-directory-name>-pipeline"""
        self.output_path = Path(output_path)

    # pylint: disable=arguments-differ
    def main(self):
        if self.output_path is None:
            self.output_path = Path(os.getcwd()).resolve()\
                .joinpath(os.path.basename(self.tasks_directory) + "-pipeline")
        PackageGenerator(self.tasks_directory, self.dependencies_directories, self.loader).create(self.output_path)
        print("Complete!")


@YAPIM.subcommand("run")
class YAPIMRunner(cli.Application):
    """
    Run a pipeline
    """
    input_directory: Optional[Path] = None
    config_path: Path
    output_directory: Optional[Path] = Path(os.getcwd()).joinpath("out")
    pipeline_pkl_path: Path
    display_status: bool = True

    @cli.switch(["-i", "--input"], str)
    def set_input(self, input_directory):
        """Path to input directory"""
        if not os.path.exists(input_directory) or not os.path.isdir(input_directory):
            print("Unable to locate input directory")
            sys.exit(1)
        self.input_directory = input_directory

    @cli.switch(["-c", "--config"], str, mandatory=True)
    def set_config_path(self, config):
        """Path to configuration file"""
        if not os.path.exists(config) or not os.path.isfile(config):
            print("Unable to load config file")
            sys.exit(1)
        self.config_path = Path(config).resolve()

    @cli.switch(["-p", "--pipeline"], str, mandatory=True)
    def set_pipeline_path(self, pipeline):
        """Path to directory containing pipeline.pkl file"""
        self.pipeline_pkl_path = Path(pipeline).resolve()

    @cli.switch(["-o", "--output"], str)
    def set_output_dir(self, output):
        """Path to output directory, default is <current-dir>/out"""
        self.output_directory = Path(output).resolve()

    @cli.switch(["-s", "--silence"])
    def set_verbosity(self):
        """Do not display log statements to stdout"""
        self.display_status = False

    def main(self, *args):
        pipeline_data = PackageLoader(self.pipeline_pkl_path).validate_pipeline_pkl()
        Executor(
            pipeline_data["loader"](self.input_directory, self.output_directory, *args),
            self.config_path,
            self.output_directory,
            pipeline_data["tasks"],
            pipeline_data["dependencies"],
            self.display_status
        ).run()


if __name__ == "__main__":
    YAPIM.run()
