#!/usr/bin/env python
import os
from pathlib import Path
from typing import Optional, List

from plumbum import cli

from yapim.utils.config_manager import ConfigManager
from yapim.utils.executor import Executor
from yapim.utils.extension_loader import ExtensionLoader
# TODO: Helper `clean` command for intermediary files for given commands
# TODO: Helper `remove` command for input ids
from yapim.utils.package_generator import PackageGenerator
from yapim.utils.package_manager import PackageManager
from yapim.utils.package_loader import PipelineLoader


class YAPIM(cli.Application):
    """
    Create and run Yet Another PIpeline (Manager)
    """
    VERSION = "0.1.0"

    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            exit(1)
        if not self.nested_command:
            self.help()
            exit(1)


@YAPIM.subcommand("config")
class YAPIMConfigCreator(cli.Application):
    """
    Create configuration file and pipeline path data
    """
    tasks_directory: Path
    loader: Optional[Path] = None
    dependencies_directories: Optional[List[Path]] = None
    config_path: Path

    @cli.switch(["-l", "--loader"], str)
    def set_loader(self, loader_name):
        """Path to custom loader class extending InputLoader"""
        if not os.path.exists(loader_name) or not os.path.isfile(loader_name):
            print("Unable to find loader")
            exit(1)
        self.loader = loader_name

    @cli.switch(["-t", "--tasks"], str, mandatory=True)
    def set_tasks_dir(self, tasks_dir):
        """Path to directory of pipeline Task/AggregateTasks"""
        if not os.path.exists(tasks_dir) or not os.path.isdir(tasks_dir):
            print("Unable to find tasks directory")
            exit(1)
        self.tasks_directory = Path(tasks_dir).resolve()

    @cli.switch(["-d", "--dependencies"], str, list=True)
    def set_dependencies_directory(self, dependencies):
        """Path to directory of Task/AggregateTask dependencies"""
        for i in range(len(dependencies)):
            if not os.path.exists(dependencies[i]) or not os.path.isdir(dependencies[i]):
                print("Unable to find dependencies directory")
                exit(1)
            dependencies[i] = Path(dependencies[i]).resolve()
        self.dependencies_directories = dependencies

    def main(self):
        PackageGenerator(self.tasks_directory, self.dependencies_directories, self.loader).create("pipeline")


@YAPIM.subcommand("run")
class YAPIMRunner(cli.Application):
    """
    Run a pipeline
    """
    input_directory: Optional[Path] = None
    config_path: Path
    output_directory: Optional[Path] = Path(os.getcwd()).joinpath("out")
    pipeline_pkl_path: Path
    display_status: bool = True

    @cli.switch(["-i", "--input"], str)
    def set_input(self, input_directory):
        """Path to input directory"""
        if not os.path.exists(input_directory) or not os.path.isdir(input_directory):
            print("Unable to locate input directory")
            exit(1)
        self.input_directory = input_directory

    @cli.switch(["-c", "--config"], str, mandatory=True)
    def set_config_path(self, config):
        """Path to configuration file"""
        if not os.path.exists(config) or not os.path.isfile(config):
            print("Unable to load config file")
            exit(1)
        self.config_path = Path(config).resolve()

    @cli.switch(["-p", "--pipeline"], str, mandatory=True)
    def set_pipeline_path(self, pipeline):
        """Path to directory containing pipeline.pkl file"""
        self.pipeline_pkl_path = Path(pipeline).resolve().joinpath(PackageManager.pipeline_file)
        if not self.pipeline_pkl_path.exists():
            print("Unable to find pipeline .pkl file")
            exit(1)

    @cli.switch(["-o", "--output"], str)
    def set_output_dir(self, output):
        """Path to output directory, default is <current-dir>/out"""
        self.output_directory = Path(output).resolve()

    @cli.switch(["-s", "--silence"])
    def set_verbosity(self):
        """Do not display log statements to stdout"""
        self.display_status = False

    def main(self, *args):
        pipeline_data = PipelineLoader(self.pipeline_pkl_path).validate_pipeline_pkl()
        if pipeline_data["loader"].__name__ == ExtensionLoader.__name__:
            Executor(
                pipeline_data["loader"](
                    self.input_directory, self.output_directory.joinpath(ConfigManager.STORAGE_DIR)
                ),
                self.config_path,
                self.output_directory,
                pipeline_data["tasks"],
                pipeline_data["dependencies"],
                self.display_status
            ).run()
        else:
            Executor(
                pipeline_data["loader"](*args),
                self.config_path,
                self.output_directory,
                pipeline_data["tasks"],
                pipeline_data["dependencies"],
                self.display_status
            ).run()


if __name__ == "__main__":
    YAPIM.run()
