#!/usr/bin/env python
import os
from importlib import import_module
from inspect import isclass
from pathlib import Path
from typing import Optional, List, Type

from plumbum import cli

from HPCBioPipe.utils.config_manager_generator import ConfigManagerGenerator
from HPCBioPipe.utils.executor import Executor
from HPCBioPipe.utils.extension_loader import ExtensionLoader
from HPCBioPipe.utils.input_loader import InputLoader


class HPCBioPipe(cli.Application):
    """
    Create and run an HPCBioPipeline
    """
    VERSION = "0.1.0"

    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            exit(1)
        if not self.nested_command:
            self.help()
            exit(1)


@HPCBioPipe.subcommand("config")
class HPCBioPipeConfigCreator(cli.Application):
    """
    Create configuration file for a pipeline
    """
    tasks_directory: str
    dependencies_directories: Optional[List[str]] = None
    config_path: Path

    @cli.switch(["-t", "--tasks"], str, mandatory=True)
    def set_tasks_dir(self, tasks_dir):
        """Path to directory of pipeline Task/AggregateTasks"""
        if not os.path.exists(tasks_dir):
            print("Unable to find tasks directory")
            exit(1)
        self.tasks_directory = tasks_dir

    @cli.switch(["-d", "--dependencies"], str, list=True)
    def set_dependencies_directory(self, dependencies):
        """Path to directory of Task/AggregateTask dependencies"""
        if not os.path.exists(dependencies):
            print("Unable to find dependencies directory")
        self.dependencies_directories = dependencies

    @cli.switch(["-c", "--config"], str, mandatory=True)
    def set_config_path(self, config):
        """Path to configuration file"""
        if not os.path.exists(config):
            print("Unable to load config file")
            exit(1)
        self.config_path = Path(config).resolve()

    def main(self):
        ConfigManagerGenerator(self.tasks_directory, self.dependencies_directories).write(self.config_path)


@HPCBioPipe.subcommand("run")
class HPCBioPipeRunner(cli.Application):
    """
    Run a pipeline
    """
    loader: Type[InputLoader] = ExtensionLoader
    config_path: Path
    output_directory: Optional[Path] = Path(os.getcwd()).joinpath("out")
    tasks_directory: str
    dependencies_directories: Optional[List[str]] = None
    display_status: bool = True

    @cli.switch(["-l", "--loader"], str)
    def set_loader(self, loader_name):
        """Use InputLoader present in task directory with provided name"""
        self.loader = self._get_loader(loader_name)

    @cli.switch(["-c", "--config"], str, mandatory=True)
    def set_config_path(self, config):
        """Path to configuration file"""
        if not os.path.exists(config):
            print("Unable to load config file")
            exit(1)
        self.config_path = Path(config).resolve()

    @cli.switch(["-o", "--output"], str)
    def set_output_dir(self, output):
        """Path to output directory, default is <current-dir>/out"""
        self.output_directory = Path(output).resolve()

    @cli.switch(["-t", "--tasks"], str, mandatory=True)
    def set_tasks_dir(self, tasks_dir):
        """Path to directory of pipeline Task/AggregateTasks"""
        if not os.path.exists(tasks_dir):
            print("Unable to find tasks directory")
            exit(1)
        self.tasks_directory = tasks_dir

    @cli.switch(["-d", "--dependencies"], str, list=True)
    def set_dependencies_directory(self, dependencies):
        """Path to directory of Task/AggregateTask dependencies"""
        if not os.path.exists(dependencies):
            print("Unable to find dependencies directory")
        self.dependencies_directories = dependencies

    @cli.switch(["-s", "--silence"])
    def set_verbosity(self):
        """Do not display log statements to stdout"""
        self.display_status = False

    def main(self, *args):
        Executor(
            self.loader(),
            self.config_path,
            self.output_directory,
            self.tasks_directory,
            self.dependencies_directories,
            self.display_status
        ).run()

    def _get_loader(self, loader_name: str) -> Type[InputLoader]:
        module = import_module(
            "{}.{}".format(
                self.tasks_directory.replace("/", "."),
                loader_name
            )
        )
        for attribute_name in dir(module):
            attribute = getattr(module, attribute_name)
            if isclass(attribute) and issubclass(attribute, InputLoader) and loader_name in attribute.__name__:
                return attribute
        print("Unable to import loader module")
        exit(1)


if __name__ == "__main__":
    HPCBioPipe.run()
